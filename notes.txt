
To get started, we need to install and initialize ruby on rails. 

rvm install 2.3.0
rvm --default use 2.3.0
rvm gemset list
rvm gemset create saasapp
rvm gemset list
rails -v
rvm --default use ruby-2.3.0@saasapp
gem install rails -v 5.0.0 --no-document
ruby -v
rails -v
rvm --default use ruby-2.3.0@saasapp
rails new saasapp
cd saasapp
touch .rvmrc
npm install -g c9
c9 .rvmrc
(Type the next line of code into the .rvmrc file as shown in the video at 7:11)
rvm use 2.3.0@saasapp

and back in terminal

cd ..
cd saasapp
y
rvm rvmrc to .ruby-version
rm .rvmrc

this is all to ensure that all software versions match up with the tutorial.


now, an explanation of all these commands:

rvm is a tool for managing the version of ruby and rails. 

its important to read documentation on the tools you use. for rvm, we can find docs at rvm.io.

with rvm install, we installed the given version of ruby.

then, we created a gemset, which is a prepackaged set of code. in this case, a custom set called saasapp.
these are kinda like python modules where each gem gives easy access to a certain functionality.

we installed the rails gem into our gemset, and checked the versions that were installed.


next, we ran rails new, which generates the framework for a rails app.

we created a new file called .rvmrc which is to ensure the correct version is always in use, then split it into the ruby-version file that will just load a bit quicker.



now we need to set up this project with git. 

from envirenment, do

git config --global user.name "First Last"
git config --global user.email your.email@address.com

and then in saasapp 

git init
git add .
git status
git commit -m "Initial commit"


now, we need to create an ssh key to link our cloud9 vm to github.

ssh-keygen -t rsa -b 4096 -C "tce_mc@telus.net"

on github, navigate to profile settings, then ssh and gpg keys.

in cloud9 we can copy our ssh key with cat ~/.ssh/id_rsa.pub to display in terminal and copy.

oh github, we will paste to the key field and put the title as cloud9

now to link to our github repo, 

git remote add origin git@github.com:your_git_username/repo-name.git
git remote
git remote -v
git push-u origin main

**note
because I created the repo first on github and made commits for the readme, I had troubles pushin the repo created locally since they had different histories.
needed to rename local branch to temp, then fetch main from github, and finally merge allowing unrelated histories.
then I could push the unified main back to github.




before starting up our server, we should make sure that sqlite is locked to the same version as the tutorial. adding   , '1.3.13' to gemfile -> gem 'sqlite3'

now we can reinstall the gemset with bundle install and bundle update


now to start up the application web server we can use rails server

we'll need to intall the proper database features
sudo yum install postgresql-devel



before we edit the homepage, we need to make changes to the gemfile.
we will make changes in a new branch first.

git checkout -b pages-and-layout

now in the new branch, we will update our gemfile to match the tutorial.

then do bundle install bundle update

and commit and push changes.

explanation of changes:
the gemfile contains all the included gems for our app and their version numbers.

running bundle update/install will update or install the listed gems to their specified version.

the gemfile.lock contains the master list of all gems and their dependencies. 



now we can start with making our home page.

we will start up the server with rails server

now lets create a new file public/index.html and add a header to show that it works.

this is the legacy way to make a home page. the proper rails ways is as follows:

create a new controller with touch app/controllers/pages_controller.rb and define 

class PagesController < ApplicationController
    def home
    end
end


now we can make a new folder for our pages and add our homepage ruby file

mkdir app/views/pages
touch app/views/pages/home.html.erb


now we need to add the route to this page file by adding root to: 'pages#home' to config/routes.rb


explanation:

to add a new page to our site we need to modify 3 files. the controller file, the view, and the route.

we create the controller file and made a class called PagesController that inherits from the build in class ApplicationController.

in this new class we added the method "home"

we then create the home.html.erb file in views/pages. all files in views are for the presentation of the site.
**note 
the name home here needs to match the method in the controller.

then we needed to add root to: 'pages#home' to routes.

this is basically directing the root (default page) to display the home method of pages.



to help make text look nicer, we can use cunstom fonts. 
google has a library of these and we can use css to use them on our site.

https://fonts.google.com/

here we can browse for fonts we like and it givces us the html and css code needed to import them

for open sans regular, bold, and extra bold here are the href links

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700;800&display=swap" rel="stylesheet">

we will add these links to the head of app/views/layouts/application.html.erb

now we can configure our css to apply these fonts to our headers in app/asseets/stylesheets/application.css

h1, h2, h3 {
  font-family: 'Open Sans', sans-serif;
  }
  

explanation:

the application.html.erb configures every page on the site. the application.css is the related css file.

this is so that we don't need to add the same code in the html for each page if it needs to be there for all pages.

otherwise, the application.html loads "yield" to the body which is whatever is in the specific page's views/pages file.



now to add a new page: the about page.

just like the home page, we need to create a file in pages for about

touch app/views/pages/about.html.erb

then we need to edit the controller and the routes.

app/controllers/pages_controller.rb

add def about
end

config/routes.rb

add get 'about', to: 'pages#about'

the only thing thats different this time compared to the home page is in routes, 
instead of pointing root to a page, we are saying when a client makes a get request to /about, return the about method of the page controller.


to give us the ability to pretty things up a bit, we can use bootstrap and sass. 

we should add bootstrap as a gem by putting gem 'bootstrap-sass', '3.3.7' to our gemfile.
and of course, bundle install/update

we should also rename our application.css file to application.css.scss and add

@import 'bootstrap-sprockets';
@inport 'bootstrap';


finally we can start using it. in our application.html we will put the yield into a <div class="container">

the documentation for bootstrap-sass is what tells us how to add it to our rails app. 

we can also look at the full documentation for bootstrap to understand how it works.


today we will add a navbar to the top of our site. we'll put the code in application.html.erb so that it show up on every page.

we can read the bootstrap documentation to find what we want to add and how to do it.

here is the codev we're adding to the top of body.

<nav class="navbar navbar-default navbar-static-top" role="navigation">
  <div class='container'>
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#main-nav-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a href="/" class="navbar-brand">SaaS</a>
    </div>
    <div class="collapse navbar-collapse" id="main-nav-collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/about">About</a></li>
      </ul>
    </div><!-- /.navbar-collapse -->
  </div>
</nav>

to add a bit of colour, we can add gradients to our backgrounds. 

for this we can use our applicatoin.css.scss

we can get premade code from sites like uigradients.com

something like this

body, .navbar {
  //Gradient provided by @_ighosh at uiGradients.com
  background: #00c6ff; /* fallback for old browsers */
  background: -webkit-linear-gradient(to left, #00c6ff , #0072ff); /* Chrome 10-25, Safari 5.1-6 */
  background: linear-gradient(to left, #00c6ff , #0072ff); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
}
.navbar {
  border: none;
}

I removed the container class from yield in applicaion.html so that we can hive better control over separate elements.

I made a jumbotron to fit the page title and had it set width according to its contents.

now to set the text in the navbar to white we have to overwrite what bootsatrap sets as the default.

we can use inspector to see that the color is set with .navbar-default .navbar-brand and navbar-nav > li > a so lets add that to our scss to overwrite.

we can also change the action on hover to change the opacity instead of color. we just target the same but with a:hover 
and set opacity: 0.75


the sass way to refactor (remove repetition) is that we can nest selectors with &:hover{color: white; opacity: 0.75}


to add some logos and icons we can use font awesome. we can check the documentation to see how to install it for ruby on rails.

we can see al;l the icons on the font awesome cheatsheet

once we find an icon we like, we need to add the link to our html. since we want to be able to click it, we need to nest it inside the anchor element that points to the home page.
<i class="fa fa-group"></i>

****dont forget to check liscences when choosing open source software to incorporate.



when working with anchors on rails, we should do them the rails way as opposed to the regular html way.

instead of <a href="destination"></a> we should do embeded ruby tags.
<%= link_to "About", "/about" %>

for nested links

<%= link_to "/", class: "navbar-brand" do %>
  <i class="fa fa-group"></i>
  DevMatch
<% end %>

another modification to this, is the destination for the links can be dynamic.

instead of pointing to the exact link, we can use the prefix listed when running rails routes

instead of "/about" do about_path or root_path.


